{"ast":null,"code":"import { INCREMENT, INCREMENT_ASYNC } from \"../constant\";\nimport { all, takeLatest, call, put } from \"redux-saga/effects\";\nexport const delay = ms => new Promise(res => setTimeout(res, ms));\n// export function* increment() {\n//   yield takeEvery(increment);\n// }\n\nfunction* asyncCount(ts) {\n  yield call(delay, ts);\n  yield put({\n    type: INCREMENT_ASYNC\n  });\n}\nexport function* incrementAsync() {\n  yield takeLatest(INCREMENT_ASYNC, asyncCount);\n}\nexport default function* countSaga() {\n  yield all([incrementAsync()]);\n}","map":{"version":3,"names":["INCREMENT","INCREMENT_ASYNC","all","takeLatest","call","put","delay","ms","Promise","res","setTimeout","asyncCount","ts","type","incrementAsync","countSaga"],"sources":["/Users/alanng/Projects/component-communication_redux-saga/src/redux/sagas/countSaga.js"],"sourcesContent":["import { INCREMENT, INCREMENT_ASYNC } from \"../constant\";\nimport { all, takeLatest, call, put } from \"redux-saga/effects\";\n\nexport const delay = (ms) => new Promise((res) => setTimeout(res, ms));\n// export function* increment() {\n//   yield takeEvery(increment);\n// }\n\nfunction* asyncCount(ts) {\n  yield call(delay, ts);\n  yield put({ type: INCREMENT_ASYNC });\n}\n\nexport function* incrementAsync() {\n  yield takeLatest(INCREMENT_ASYNC, asyncCount);\n}\n\nexport default function* countSaga() {\n  yield all([incrementAsync()]);\n}\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,eAAe,QAAQ,aAAa;AACxD,SAASC,GAAG,EAAEC,UAAU,EAAEC,IAAI,EAAEC,GAAG,QAAQ,oBAAoB;AAE/D,OAAO,MAAMC,KAAK,GAAIC,EAAE,IAAK,IAAIC,OAAO,CAAEC,GAAG,IAAKC,UAAU,CAACD,GAAG,EAAEF,EAAE,CAAC,CAAC;AACtE;AACA;AACA;;AAEA,UAAUI,UAAUA,CAACC,EAAE,EAAE;EACvB,MAAMR,IAAI,CAACE,KAAK,EAAEM,EAAE,CAAC;EACrB,MAAMP,GAAG,CAAC;IAAEQ,IAAI,EAAEZ;EAAgB,CAAC,CAAC;AACtC;AAEA,OAAO,UAAUa,cAAcA,CAAA,EAAG;EAChC,MAAMX,UAAU,CAACF,eAAe,EAAEU,UAAU,CAAC;AAC/C;AAEA,eAAe,UAAUI,SAASA,CAAA,EAAG;EACnC,MAAMb,GAAG,CAAC,CAACY,cAAc,CAAC,CAAC,CAAC,CAAC;AAC/B"},"metadata":{},"sourceType":"module"}