{"ast":null,"code":"import { INCREMENT, INCREMENT_ASYNC } from \"../constant\";\nimport { all, takeEvery, call, put } from \"redux-saga/effects\";\nexport const delay = ms => new Promise(res => setTimeout(res, ms));\n// export function* increment() {\n//   yield takeEvery(increment);\n// }\n\nexport function* incrementAsync(miliseconds) {\n  yield call(delay, 500);\n  yield put({\n    type: INCREMENT_ASYNC\n  });\n}\nexport default function* countSaga() {\n  yield all([]);\n}","map":{"version":3,"names":["INCREMENT","INCREMENT_ASYNC","all","takeEvery","call","put","delay","ms","Promise","res","setTimeout","incrementAsync","miliseconds","type","countSaga"],"sources":["/Users/alanng/Projects/component-communication_redux-saga/src/redux/sagas/countSaga.js"],"sourcesContent":["import { INCREMENT, INCREMENT_ASYNC } from \"../constant\";\nimport { all, takeEvery, call, put } from \"redux-saga/effects\";\n\nexport const delay = (ms) => new Promise((res) => setTimeout(res, ms));\n// export function* increment() {\n//   yield takeEvery(increment);\n// }\n\nexport function* incrementAsync(miliseconds) {\n  yield call(delay, 500);\n  yield put({ type: INCREMENT_ASYNC });\n}\n\nexport default function* countSaga() {\n  yield all([]);\n}\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,eAAe,QAAQ,aAAa;AACxD,SAASC,GAAG,EAAEC,SAAS,EAAEC,IAAI,EAAEC,GAAG,QAAQ,oBAAoB;AAE9D,OAAO,MAAMC,KAAK,GAAIC,EAAE,IAAK,IAAIC,OAAO,CAAEC,GAAG,IAAKC,UAAU,CAACD,GAAG,EAAEF,EAAE,CAAC,CAAC;AACtE;AACA;AACA;;AAEA,OAAO,UAAUI,cAAcA,CAACC,WAAW,EAAE;EAC3C,MAAMR,IAAI,CAACE,KAAK,EAAE,GAAG,CAAC;EACtB,MAAMD,GAAG,CAAC;IAAEQ,IAAI,EAAEZ;EAAgB,CAAC,CAAC;AACtC;AAEA,eAAe,UAAUa,SAASA,CAAA,EAAG;EACnC,MAAMZ,GAAG,CAAC,EAAE,CAAC;AACf"},"metadata":{},"sourceType":"module"}