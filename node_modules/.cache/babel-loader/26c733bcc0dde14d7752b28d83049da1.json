{"ast":null,"code":"import { INCREMENT, INCREMENT_ASYNC } from \"../constant\";\nimport { all, takeLatest, call, put } from \"redux-saga/effects\";\nexport const delay = ms => new Promise(res => setTimeout(res, ms));\nfunction* asyncCount() {\n  console.log(\"countSaga: asyncCount\");\n  yield call(delay, 2000);\n  yield put({\n    type: INCREMENT\n  });\n}\nexport function* watchIncrementAsync() {\n  console.log(\"watching: INCREMENT_ASYNC ACTION\");\n  yield takeLatest(INCREMENT_ASYNC, asyncCount);\n}\nexport default function* countSaga() {\n  yield all([watchIncrementAsync()]);\n}","map":{"version":3,"names":["INCREMENT","INCREMENT_ASYNC","all","takeLatest","call","put","delay","ms","Promise","res","setTimeout","asyncCount","console","log","type","watchIncrementAsync","countSaga"],"sources":["/Users/alanng/Projects/component-communication_redux-saga/src/redux/sagas/countSaga.js"],"sourcesContent":["import { INCREMENT, INCREMENT_ASYNC } from \"../constant\";\nimport { all, takeLatest, call, put } from \"redux-saga/effects\";\n\nexport const delay = (ms) => new Promise((res) => setTimeout(res, ms));\n\nfunction* asyncCount() {\n  console.log(\"countSaga: asyncCount\");\n  yield call(delay, 2000);\n  yield put({ type: INCREMENT });\n}\n\nexport function* watchIncrementAsync() {\n  console.log(\"watching: INCREMENT_ASYNC ACTION\");\n  yield takeLatest(INCREMENT_ASYNC, asyncCount);\n}\n\nexport default function* countSaga() {\n  yield all([watchIncrementAsync()]);\n}\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,eAAe,QAAQ,aAAa;AACxD,SAASC,GAAG,EAAEC,UAAU,EAAEC,IAAI,EAAEC,GAAG,QAAQ,oBAAoB;AAE/D,OAAO,MAAMC,KAAK,GAAIC,EAAE,IAAK,IAAIC,OAAO,CAAEC,GAAG,IAAKC,UAAU,CAACD,GAAG,EAAEF,EAAE,CAAC,CAAC;AAEtE,UAAUI,UAAUA,CAAA,EAAG;EACrBC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;EACpC,MAAMT,IAAI,CAACE,KAAK,EAAE,IAAI,CAAC;EACvB,MAAMD,GAAG,CAAC;IAAES,IAAI,EAAEd;EAAU,CAAC,CAAC;AAChC;AAEA,OAAO,UAAUe,mBAAmBA,CAAA,EAAG;EACrCH,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;EAC/C,MAAMV,UAAU,CAACF,eAAe,EAAEU,UAAU,CAAC;AAC/C;AAEA,eAAe,UAAUK,SAASA,CAAA,EAAG;EACnC,MAAMd,GAAG,CAAC,CAACa,mBAAmB,CAAC,CAAC,CAAC,CAAC;AACpC"},"metadata":{},"sourceType":"module"}